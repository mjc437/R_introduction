getwd()
# Data structures
cats <- data.frame(coat = c("calico", "black", "tabby"),
weight = c(2.1, 5.0, 3.2),
likes_strings = c(1,0,1))
# Data structures
cats_df <- data.frame(coat = c("calico", "black", "tabby"),
weight = c(2.1, 5.0, 3.2),
likes_strings = c(1,0,1))
# Data structures
cats_df <- data.frame(coat = c("calico", "black", "tabby"),
weight = c(2.1, 5.0, 3.2),
likes_strings = c(1,0,1))
cats_df
str(cats_df)
cats_df$likes_strings
cats_df$weight + 2
paste("My cat is", cats_df$coat)
#Data structures
typeof(cats_df$weight)
typeof(TRUE)
typeof(cats_df$coat)
#Writing files
write.csv(x = cats_df, file = "cats_df.csv")
#Writing files
write.csv(x = cats_df, file = "cats_df.csv", row.names = FALSE)
#Writing files
write.csv(x = cats_df, file = "cats_df.csv", row.names = FALSE, quote = FALSE)
# Matrix
example_mat <- matrix(0, ncol = 6, nrow = 3)
example_mat
dim(cats_df)
head(cats_df)
cats_df[3]
library(ggplot2)
download.file("https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/main/episodes/data/gapminder_data.csv", destfile = "gapminder_data.csv")
gapminer_df <- read.csv(file = "gapminer_data.csv")
gapminder_df <- read.csv(file = "gapminder_data.csv")
ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point()
ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(alpha = 0.5)
ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(alpha = 0.5) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(alpha = 0.5) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)") + facet_wrap(.~continent)
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent))
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent)) + geom_line()
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line()
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point()
+ scale_x_log10() + geom_smooth(method = "lm")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, shape = 23) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
View(gapminder_df)
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, shape = 23, size = pop) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, shape = 23, size = pop) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, shape = 23, size = "pop") + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = 23, size = "pop")) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = 23, size = "country")) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = 23, color = "country" size = "country")) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = 23, color = "country", size = "country")) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = 23, color = country, size = pop)) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = continent, color = country, size = pop)) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = continent, size = pop)) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)")
# Evaluate lifeExp by year
ggplot(data = gapminder_df, mapping = aes(x = year, y = lifeExp, color = continent, group = country)) + geom_line() +
geom_point(alpha = 0.5, aes(shape = continent, size = pop)) + labs(x = "GDP Per Capita", y = "Life Expectancy (yrs)") +
geom_smooth()
knitr::opts_chunk$set(echo = TRUE)
gapminder_df <- read.csv("data/gapminder_data.csv")
gapminder_df <- read.csv("data/gapminder_data.csv")
median(gapminder_df$pop)
med_pop <- median(gapminder_df$pop)
num_obs <- nrow(gapminder_df)
med_pop <- median(gapminder_df$pop)
num_obs <- nrow(gapminder_df)
library(ggplot2)
ggplot(gapminder_df, aes(x = year, y = lifeExp, group = country, color = continent), geom_line(), scale_y_log10())
ggplot(gapminder_df, aes(x = year, y = lifeExp, group = country, color = continent)) + geom_line() + scale_y_log10()
ggplot(gapminder_df, aes(x=pop)) + geom_histogram()
ggplot(gapminder_df, aes(x=pop)) + geom_histogram()
